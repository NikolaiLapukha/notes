/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HugoHighlight
});
module.exports = __toCommonJS(main_exports);
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var import_language = require("@codemirror/language");
var import_obsidian = require("obsidian");
var HugoHighlight = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEditorExtension(import_view.ViewPlugin.fromClass(HighlightViewPlugin, { decorations: (plugin) => plugin.decorations }));
  }
};
var HighlightViewPlugin = class {
  constructor(view) {
    this.decorations = this.buildDecorations(view);
  }
  update(update) {
    if (update.viewportChanged || update.docChanged) {
      this.decorations = this.buildDecorations(update.view);
    }
  }
  buildDecorations(view) {
    const decorations = [];
    let beginLineNumber = 0;
    let linesToHighlight = [];
    for (const { from, to } of view.visibleRanges) {
      (0, import_language.syntaxTree)(view.state).iterate({
        from,
        to,
        enter(node) {
          if (node.type.name.includes("HyperMD-codeblock-begin")) {
            const line = view.state.doc.lineAt(node.from);
            beginLineNumber = line.number;
            const lineText = view.state.sliceDoc(line.from, line.to);
            if (/{.*}/.test(lineText)) {
              linesToHighlight = extractHLLines(lineText);
            } else {
              linesToHighlight = [];
            }
          }
          if (node.type.name.includes("HyperMD-codeblock-bg")) {
            const line = view.state.doc.lineAt(node.from);
            const lineNumber = line.number - beginLineNumber;
            if (linesToHighlight.includes(lineNumber)) {
              decorations.push(import_view.Decoration.line({ class: "hugo-line-highlight" }).range(node.from));
            }
          }
        }
      });
    }
    return import_state.RangeSet.of(decorations, true);
  }
};
function extractHLLines(line) {
  var _a;
  let match = line.match(/hl_lines="?(\d+)"?\s*/);
  if (match) {
    return [Number.parseInt(match[1])];
  }
  match = line.match(/hl_lines=\[(.*)\]\s*/);
  if (!match) {
    return [];
  }
  const lineNumbers = [];
  const lineEntries = match[1].split(",").map((s) => s.trim());
  for (const entry of lineEntries) {
    const isRange = entry.includes("-");
    const quotedMatch = entry.match(/^"(.+)"$/);
    if (isRange) {
      if (quotedMatch) {
        const [start, end] = quotedMatch[1].split("-").map((n) => Number.parseInt(n));
        if (start < end) {
          for (let i = start; i <= end; i++) {
            lineNumbers.push(i);
          }
        }
      }
    } else {
      const unquoted = (_a = quotedMatch == null ? void 0 : quotedMatch.at(1)) != null ? _a : entry;
      const num = Number.parseInt(unquoted);
      if (!Number.isNaN(num)) {
        lineNumbers.push(num);
      }
    }
  }
  return lineNumbers;
}
